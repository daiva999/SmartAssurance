<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $rootScope, spUtil, spModal) {
	var c = this;
	//	$scope.lifeCover="1 crore";
	//$scope.plans = c.data.mock.products;
	//c.data.plans=$scope.plans;
	$scope.redirectToDetailsPage=function(){
		alert('called')
		return ''
	}
	$scope.records=c.data.records;

	console.log($scope.records)


	$scope.compareArray=[];
	$scope.indexArray=[];
	$scope.checkboxChanged=function(prodCode,sum,prodName,index){
		if($scope.indexArray.indexOf(index) ==-1){
			var obj={
				productCode:prodCode,
				sumAss:sum,
				productName: prodName
			}
			$scope.indexArray.push(index);
			$scope.compareArray.push(obj);
			alert(JSON.stringify($scope.compareArray))
		}
		else if($scope.indexArray.indexOf(index)!=-1){
			var elementIndex=$scope.indexArray.indexOf(index);
			$scope.indexArray.splice(elementIndex,1);
			$scope.compareArray.splice(elementIndex,1);
		}
	}
	$scope.compareProducts=function(arr){
		$rootScope.$emit('compareProducts',arr);
	}

	function generateGUID() {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
			var r = Math.random() * 16 | 0,
					v = c === 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
	}

	var redirectURL;
	var dataToPass;


	if (!sessionStorage.getItem(c.data.user)) {
		// Initialize an empty session object and store it in sessionStorage
		var emptySession = {};
		sessionStorage.setItem(c.data.user, JSON.stringify(emptySession));
	}

	var newSessionData = JSON.parse(sessionStorage.getItem(c.data.userName));


	var userdetails;
	var newDetails = {
		'userdetails': userdetails,
		"action": 'firstCall'
	};


	var sessionID = generateGUID();
	//var Insurer;
	//var premiumAmount;

	function storeSessionDetails(prodcode, premiumAmount) {

		var sessionDetails = {
			id: sessionID,
			prodCode: prodcode,
			userdetails: userdetails,
			//newSessionData: newSessionData,
			//insurer: Insurer,
			//premium: c.data.premium,
			//premiumAmount : premiumAmount

		};
		sessionStorage.setItem(c.data.user, JSON.stringify(sessionDetails));
	}

	$scope.redirectToProductPage = function (prodCode) {
		//Insurer = insurer;
		dataToPass = prodCode;
		redirectURL = "/vfsp?id=plan_details";
		storeSessionDetails(dataToPass, premiumAmount);
		window.location.href = redirectURL;
	};
























	$scope.users = Array.apply(null, Array(4)).map(function () {
		return {
			name: "",
			dob: "",
			age: "",
			email: "",
			phone: "",
			panNumber: "",
			nominee: "",
			relationship: "",
			passport: "",
			gender: "",
		};
	});

	$scope.amount = "";
	$scope.productImg = $scope.data.productImg;


	$scope.calculateAge = function () {
		for (var i = 0; i < $scope.users.length; i++) {
			if ($scope.users[i].dob) {
				var dob = new Date($scope.users[i].dob);
				var today = new Date();

				if (!isNaN(dob.getTime()) && dob <= today) {
					// Ensure dob is not after today's date
					var age = today.getFullYear() - dob.getFullYear();

					if (
						today.getMonth() < dob.getMonth() ||
						(today.getMonth() === dob.getMonth() &&
						 today.getDate() < dob.getDate())
					) {
						age--;
					}
					if (age >= 1 && age <= 70) {
						$scope.users[i].age = age;
					} else if (age > 70) {
						// alert("Age should not be greater than 70.");
						$scope.users[i].age = age;
					} else {
						$scope.users[i].age = "0";
					}
				} else {
					alert("Please enter a valid date before today.");
					$scope.users[i].age = "";
					$scope.users[i].dob = "";
				}
			} else {
				$scope.users[i].age = "";
			}
		}

		$scope.updatePremiumDetails();
	};

	$scope.formatPan = function () {
		for (var i = 0; i < $scope.users.length; i++) {
			$scope.users[i].panNumber = $scope.users[i].panNumber.toUpperCase();
			if ($scope.users[i].panNumber.length > 5) {
				var firstPart = $scope.users[i].panNumber.substring(0, 5);
				var numericPart = $scope.users[i].panNumber
				.substring(5, 9)
				.replace(/\D/g, "");
				var lastCharacter = $scope.users[i].panNumber
				.substring(9, 10)
				.replace(/[^a-zA-Z]/g, "");

				$scope.users[i].panNumber = firstPart + numericPart + lastCharacter;
			}
		}
	};

	// passport validation
	$scope.validatePassport = function () {
		for (var i = 0; i < $scope.users.length; i++) {
			$scope.users[i].passport = $scope.users[i].passport.toUpperCase();

			if ($scope.users[i].passport.length > 1) {
				var charPart = $scope.users[i].passport.substring(0, 1);
				var numericPart = $scope.users[i].passport
				.substring(1, 8)
				.replace(/\D/g, "");

				$scope.users[i].passport = charPart + numericPart;
			}
		}
	};

	$scope.isPersonHidden = [true];

	$scope.togglePerson = function ($index) {
		$scope.isPersonHidden[$index] = !$scope.isPersonHidden[$index];
	};

	$scope.showDummyData = false;
	// $scope.containerHeight = "50vh";

	$scope.toggleDummyData = function () {
		$scope.showDummyData = !$scope.showDummyData;

		// $scope.containerHeight = $scope.showDummyData ? "60vh" : "50vh";
	};

	// check if form is filled or not
	$scope.isFormValid = function () {
		/*
		if ($scope.amount <= 0) {
        return false;
    }
		*/
		return $scope.users.every(function (user, index) {
			if (index < $scope.numberOfPersons) {
				return [
					"name",
					"email",
					"dob",
					"gender",
					"phone",
					"passport",
					"nominee",
					"relationship",
				].every(function (property) {
					return user[property];
				});
			} else {
				return true;
			}
		});
	};

	var startDate, endDate, options;

	$scope.sessionKey = $scope.data.user;

	$scope.sessionDetails = JSON.parse(sessionStorage.getItem($scope.sessionKey));

	if ($scope.sessionDetails) {
		if ($scope.sessionDetails) {
			$scope.travelRegion =
				$scope.sessionDetails.travelRegion.replaceAll(/_/g, " ");
			$scope.duration = $scope.sessionDetails.duration;
			$scope.numberOfPersons =
				$scope.sessionDetails.numberOfPersons;

			for (var l = 0; l < $scope.numberOfPersons; l++) {
				$scope.users[l].age =
					$scope.sessionDetails.travellerAges[l].age;
				spUtil.addInfoMessage($scope.users[l].age);
			}

			startDate = new Date($scope.sessionDetails.startDate);
			endDate = new Date($scope.sessionDetails.endDate);

			options = { day: "numeric", month: "short", year: "numeric" };

			$scope.formattedStartDate = new Intl.DateTimeFormat(
				"en-US",
				options
			).format(startDate);
			$scope.formattedEndDate = new Intl.DateTimeFormat(
				"en-US",
				options
			).format(endDate);
		} else {
			spUtil.addTrivialMessage(
				"Invalid session details. No provided data found."
			);
		}

	}

	$scope.users[0].name = $scope.data.name;
	$scope.users[0].gender = $scope.data.gender;
	$scope.users[0].email = $scope.data.email;
	$scope.users[0].phone = $scope.data.phone;



	


	$scope.rediectToPayment = function (index) {
		var dataToSend = {
		prodCode: $scope.records[index].prodCode,
		insurer: $scope.records[index].insurer,
		details: $scope.sessionDetails,
		users: $scope.users,
	};
		if (!$scope.isFormValid()) {
			return;
		} else {
			sessionStorage.setItem(
				$scope.data.userName,
				JSON.stringify(dataToSend)
			);
			location.href = "/vfsp?id=test_payment";
		}
	};

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.grid-card{
  display:flex;
  flex-direction:column;
  justify-content:center;
  align-items:center;
}

.cardd {
  height: 220px;
  // height: 100%;
  width: 400px;
  box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.2);
  border-top: 1px solid #f0f3f4; 
  border-left: 1px solid #f0f3f4; 
  //padding-bottom: 20px;
  //padding-right: 20px;
  //padding-left: 17px;
  padding:10px;
  border-radius: 10px;
  background-color: white;
}
.top{
  display:flex;
  flex-direction:column;
}

ul li a {
  text-decoration: none;
}


.recommandation{
      padding-left: 0.7rem;
  padding-right: 0.7rem;
   padding-bottom: 0.7rem;
  //padding:5px;
      display: flex;
    align-items: flex-start;
    color: white;
    background-color: #9747FF;
       width: fit-content;
        height: 1.9rem;
   font-weight: 600;
    border-radius: 1.25rem;
    font-size: 1.4rem;
    border-top-left-radius: .625rem;
    border-top-right-radius: .325rem;
    border-bottom-left-radius: 0rem;
    border-bottom-right-radius: 0rem;
}

#people::before {
  content: "\1F465";
  font-size: 12px;

}

#star::before{
  content: "\2605";
  font-size: 12px;
}


.grid-card{
  display: grid;
  grid-template-columns: repeat(3, 1fr); 
  grid-gap: .3125rem 1.5rem;
 
}
.card-container{
  margin-top:1rem;
  margin-left:4px;
}


img{
  height:70px;
  width:auto;
  //mix-blend-mode:color-burn;
  object-fit:contain;
}

.top-right{
      margin-left: 55.6rem;
    width: 101cm;
    height: 3cm;
    margin-top: -44.8rem;
}


.title {
  background-color: #f0f3f4;
  //padding: 10px;
  border-radius: 10px 10px 0 0;
  margin-bottom: 20px;
  font-size:100px;
}

.title h2 {
  background-color: #f0f3f4;
  padding: 20px; 
  height: 60px; 
  margin: 0;
  margin-bottom: 20px;
}

.tools-calculators {
  //padding: 20px;
  border-radius: 10px;
  border: 2px solid #f0f3f4;
  height:fit-content;
  width:20rem;
}


hr{
  margin-top:5px;
}

.list{
  padding-left: 10px;
  padding-right: 10px;
  padding-bottom: 10px;
}
.list a{
  color:blue;
}

.tools-calculators ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.tools-calculators ul li a {
  color: blue;
  text-decoration: none;
  position: relative;
}

.tools-calculators ul li a::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: -2px;
  width: 100%;
  height: 1px;
  background-color: blue;
  transition: bottom 0.3s ease;
}

.line2 {
display: flex;
justify-content: space-between;
  align-items:center;
  height:70px;
  //border: 1px solid red;
  padding-bottom:10px;
}
/*
.line-item {
flex: 1;
text-align: center;
}
*/



.line1{
  display:flex;
  justify-content: space-between;
  align-items: center;
   //margin-top: 0px;
  height:70px;
 // border: 1px solid red;
  
}

.line1a{
  margin-right:auto;
  display:flex;
justify-content: space-between;
  align-items: center;
}

.line1a h6{
    color: #9747FF;
        margin-left: -10px;
   // margin-top: 2.1875rem;
  margin-top:.7rem;
    font-weight: bold;
   font-size: 20px;
  text-align:center;
}
.line1 .line1a img {
     width: 120px;
    height: 88px;
}
.line1b {
    display: flex;
    align-items: center; /* Align items vertically in the center */
}

.line1b input[type=checkbox] {
    appearance: none; /* Remove default appearance */
    -webkit-appearance: none; /* For Safari/Chrome */
    -moz-appearance: none; /* For Firefox */
    width: 18px; /* Adjust width as needed */
    height: 18px; /* Adjust height as needed */
    border: 2px solid #ccc; /* Border color */
    border-radius: 3px; /* Rounded corners */
    cursor: pointer;
    transition: background-color 0.3s ease;
    position: relative;
    //margin-right: 10px; /* Adjust margin as needed */
}


.line1b input[type=checkbox]:checked {
    background-color: #9747FF;
}


.line1b input[type=checkbox]::after {
    content: "\2713"; /* Unicode for check mark */
    font-size: 16px;
    color: white; /* Color of the tick mark */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0; /* Initially hidden */
    transition: opacity 0.3s ease;
}


.line1b input[type=checkbox]:checked::after {
    opacity: 1;
}


.compare{
    margin-top: 0.7rem;
    color: #585D62;
    margin-left: 5px;
}


.small{
  font-size: 12px;
  opacity:0.7;
}

.radioBtns {
  display: inline-flex;
    justify-content: normal;
    padding-bottom: 62.5rem;
    padding-left: 0rem;
    margin-bottom: 6.25rem;
    margin-left: 3.4rem;
  margin-top: -28px;
}

.radioBtns input[type=radio] {
    width: 17px; 
    height: 17px; 
    background-color: white; 
    border: 2px solid #ccc; 
    border-radius: 50%;
    appearance: none; /* Remove the default appearance */
    position: relative;
    cursor: pointer;
}

/* Style for the radio button when it's checked */
.radioBtns input[type=radio]:checked {
    background-color: #9747FF; /* Change to your desired background color */
    border-color: #9747FF; /* Change the border color to match the background */
}

/* Style for the inner circle */
.radioBtns input[type=radio]::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 8px; /* Adjust the size of the inner circle */
    height: 8px; /* Adjust the size of the inner circle */
    border-radius: 50%;
    background: white; /* Color of the inner circle */
    display: none; /* Initially hidden */
}

/* Show the inner circle when the radio button is checked */
.radioBtns input[type=radio]:checked::after {
    display: block; /* Show the inner circle */
}
.radioBtns .form-check {
       display: inline-flex;
    align-items: center;
    margin-right: 1.rem;
   
}
.radioBtns .form-check-label {
    font-size: 15px;
}


.radioBtns .form-check input[type="radio"] {
    margin-right: 5px; /* Add space between radio button and label */
}

.benefits-container{
  width:800px;
  height:30cm;
  
}

.line2 {
      display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); /* Adjust column width as needed */
    grid-gap: 10px;  /* Adjust gap between grid items as needed */
    
  align-items: center;
  

}

.line-item {
    display: contents; /* Flatten the layout to place all .benefit-item elements in the grid */
}

.benefit-item {
  border: none;
    padding: .625rem;
    width: 130px;
  
}

.small{
  color:black;
//font:size:8px;
}

.line3{
  display:flex;
  justify-content: space-between;
  align-items: center;
 margin-top:auto;
  //margin-bottom:15px;
}

.line3 a {
  color: blue;
}


.smaller-text {
  font-size: 12px; 
}

.btn-primary {
  background-color: #9747FF;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  //cursor: pointer;
  font-size: 16px;
  width:100px;
}




.topStuff{
  display:flex;

}

.top-left {
  height: 100px;
  width: 23.0cm;
  display: flex;
  justify-content: space-between;
  border: 2px solid #f0f3f4; 
  background-color: #f0f3f4; 
}

.left-content {
  width: 150px;
  height: 30px;
  padding-top:18px;
  padding-bottom:30px;
  padding-left:30px;
  padding-right:100px;
}
.left-content p {
  white-space: nowrap; 
  color: #333333;
}
.left-content select.custom-select {
    font-weight: bold;
  border: 1px solid #D5D6D6; 
  height: 30px;
  width: 110px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #fff;
    box-sizing: border-box;
    //-webkit-appearance: none;
    //-moz-appearance: none;
   // appearance: none;
    cursor: pointer;
    position: relative; /* Add position relative for pseudo element positioning */
}


/* Style for custom dropdown arrow */
.left-content select.custom-select:after {
    content: "";
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    width: 0;
    height: 0;
   // border: 6px solid red;
   // border-color: #fff transparent transparent transparent;
}

.middle-content {
  width: 150px;
  height: 30px;
  padding-top:18px;
  padding-bottom:30px;
  padding-left:40px;
  padding-right:100px;
}
.middle-content p {
  white-space: nowrap; 
  color: #333333;
}

.custom {
  font-weight: bold;
  border: 1px solid #D5D6D6;
  border-radius: 5px;
  height:30px;
  width:110px;
}
.end-content {
  padding-top: 5;
  padding-bottom: 0px;
  padding-left: 0px;
  height: 50px;
}

.end-content p {
    color: #333333;
    padding-bottom: 0rem;
    padding-left: 1.875rem;
    margin-top: 1.22rem;
    margin-left: .625rem;
}
}
}

.end-content label {
     margin-right: .75rem;
    margin-bottom: -0.5rem;
    color: #333333;
}




.icon1 {
  text-align: center; 
  position: relative; 
  padding-top: 50px; 
  padding-left:70px;
}

.icon1::before {
  content: '\2261'; 
  position: absolute; 
  top: 0; 
  left: 50%; 
  transform: translateX(-50%); 
  font-size: 24px;
  padding-top: 12px;
  padding-left:70px;
}

.icon2 {
  text-align: center; 
  position: relative; 
  padding-top: 50px; 
  padding-right:30px;
}

.icon2::before {
  content: '\2261'; 
  position: absolute; 
  top: 0; 
  left: 50%; 
  transform: translateX(-50%); 
  font-size: 24px;
  padding-top: 12px;
  padding-right:30px;
}
.dropdown-content {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  border: 2px solid black; 
  padding: 5px;
  background-color: white;
  z-index: 1; 
}


.dropdown-content ul {
  list-style-type: none;
  padding: 0;
}

.dropdown-content li {
  padding: 5px;
  cursor: pointer;
}
.icon2 {
  cursor: pointer;
  position: relative; 
}
#compare-button {
  background-color: yellow;
  color: black;
  border: 2px solid yellow;
  border-radius: 10px;
  padding: 10px 40px; 
  font-size: 16px;
  cursor: pointer;
  display: inline-block; 
  text-align: center; 
  width: 320px;
}

#compare-button:hover {
  background-color: darkyellow;
  border-color: darkyellow;
}

.compareTile{
  display:flex;
  align-items:center;
  gap:30px;
  position: fixed;
  bottom: 0;
  width: 100%;
  background-color: white; /* Adjust as needed */
}

.compareBlock{
	width: 200px;
  display:flex;
  align-items:center;
  gap: 30px

}






// popup
* {
  font-family: "Helvetica";
}

.person-section {
  padding: 10px 20px;
  display: flex;
  justify-content: space-between;
}

.required {
  color: red;
}

.pMar {
  margin-bottom: 20px;
}

.mar {
  margin-bottom: 15px;
}

.main {
  /* // max-width: 800px; */
  border-radius: 20px;
  display: flex;
  gap: 20px;
  padding-left: 20px;
  /*
  // height: 80vh;
  // padding: 20px;
  // background: #f2f7ff;
  // box-shadow: rgba(0, 0, 0, 0.16) 0px 10px 36px 0px, rgba(0, 0, 0, 0.06) 0px 0px 0px 1px;
  */
}

.sticky-container {
  position: sticky;
  top: 0;
  z-index: 1000;
  background-color: white;
}

.backDiv {
  /*
  display:flex;
  gap:5px;
  padding-left: 20px;
  cursor:pointer;
  */
  display: flex;
  gap: 5px;
  max-width: 100px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  margin: 15px 0;
  position: relative;
  margin-left: 30px;
}

.backDiv p {
  margin-top: -4px;
}

.section-1 {
  
  // width: 65%;
  /*
  max-height: 80vh;
  overflow-y: auto;
  */
  /* // height: 77vh; */
  padding: 10px;
  padding-left: 30px;
  /* 
  border: 1px solid;
  // margin-left: 20px;
  */
  border-radius: 5px;
  background: #ffffff;
  box-shadow: rgba(0, 0, 0, 0.16) 0px 10px 36px 0px,
    rgba(0, 0, 0, 0.06) 0px 0px 0px 1px;
}

.cardDiv {
  padding: 10px;
}

.boxDiv {
  padding: 10px;
  margin: 10px 10px 20px 0;
  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
}

.input-container {
  position: relative;
  margin-bottom: 20px;
}

.input-label {
  position: absolute;
  left: 10px;
  top: 50%;
  transform: translateY(-50%);
  color: #777;
  pointer-events: none;
  transition: top 0.5s, font-size 0.3s;
}

.input-box {
  width: 300px;
  height: 50px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  outline: none;
  font-size: 16px;
}

.input-box:focus+.input-label,
.input-box:not(:placeholder-shown)+.input-label {
  top: 0.1px;
  font-size: 12px;
  color: #333;
  background: #fff;
  padding: 5px;
}

.userNameInputBox {
  text-transform: capitalize;
}

.line {
  display: flex;
  gap: 50px;
}

.line-1-inner {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: -10px;
  margin-bottom: 10px;
}

.line-1-inner p {
  margin: 0;
}

.line-radio {
  display: flex;
  gap: 10px;
}

.custom-radio {
  display: flex;
  /* gap: 20px; */
  align-items: center;
  width: 145px;
  height: 50px;
  border: 1px solid #cccccc;
  border-radius: 5px;
  padding: 10px;
  cursor: pointer;
}

.radio-input {
  display: none;
}

.radio-label {
  position: relative;
  cursor: pointer;
  padding-left: 10px;
  margin-right: 10px;
  line-height: 24px;
}

.custom-tick {
  /* position: absolute; */
  /* top: 0; */
  /* left: 0; */
  margin-left: 10px;
  box-sizing: border-box;
  float: right;
  width: 20px;
  height: 20px;
  background-color: #fff;
  border: 2px solid #333;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;

  color: #333;
  font-size: 12px;
  transition: background-color 0.3s, color 0.3s;
}

.radio-input:checked+.radio-label .custom-tick {
  background-color: #333;
  color: #fff;
}

/*
.btn {
padding: 10px 100px 10px 100px;
}
.btn-div {
text-align: center;
margin-bottom: 20px;
}
*/
.btn-div {
  text-align: center;
  margin-bottom: 20px;
}

.btn {
  position: relative;
  padding: 10px 100px 10px 100px;
}

.processing-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 4px;
  z-index: 1;
}

.processing-spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

/*  */

.section-2 {
  position: -webkit-sticky;
  position: sticky;
  top: 20px;
  z-index: 100;
  width: 35%;
  height: 70%;
  border-radius: 5px;
  background: #ffffff;
  box-shadow: rgba(0, 0, 0, 0.16) 0px 10px 36px 0px,
    rgba(0, 0, 0, 0.06) 0px 0px 0px 1px;
}

.section-3 {
  padding: 10px 20px;
  background: #f2f7ff;
  display: flex;
  justify-content: space-between;
}

.h3 {
  margin-left: 20px;
  font-size: 14px;
}

.h4 {
  font-size: 15px;
  font-weight: bold;
}

.hp {
  font-size: 14px;
}

.capitalize {
  text-transform: capitalize;
}

.img-div {
  display: flex;
  padding: 0 20px;
  gap: 15px;
}

.img-div-1 {
  display: flex;
  justify-content: space-between;
  padding: 0 20px;
  background: #f2f7ff;
}

.img-div-down {
  display: flex;
  justify-content: space-between;
  padding: 0 20px;
  margin-top: -15px;
}

.gst-p {
  font-size: 12px;
  opacity: 0.5;
}

.iDiv {
  height: 200px;
  overflow-y: auto;
}

.iDiv::-webkit-scrollbar {
  width: 8px;
}

.iDiv::-webkit-scrollbar-thumb {
  background-color: #b9cdd7;
  border-radius: 6px;
}

.iDiv::-webkit-scrollbar-track {
  background-color: #f1f1f1;
}

.error {
  color: red;
  text-align: center;
  margin-top: 100px;
}



/* 404 */
.page_404 {
  padding: 40px 0;
  background: #fff;
  font-family: 'Arvo', serif;
}

.page_404 img {
  width: 100%;
}

.four_zero_four_bg {

  background-image: url(https://cdn.dribbble.com/users/285475/screenshots/2083086/dribbble_1.gif);
  height: 400px;
  background-position: center;
}


.four_zero_four_bg h1 {
  font-size: 80px;
}

.four_zero_four_bg h3 {
  font-size: 80px;
}

.contant_box_404 {
  margin-top: -50px;
}


.red-border {
  border: 1px solid red;
}

.blue-border {
  border-color: 1px solid #ccc;
}
.panCheckBox{
  margin-top: -1px
}
.iFrameDiv  i{
  font-size: 18px;
  margin-top: 10px;
}

@media only screen and (max-width: 400px) {
  .main {
    flex-direction: column;
    padding-left: 10px;
  }

  .input-box {
    width: 250px;
  }

  .section-1,
  .section-2 {
    width: 100%;
  }

  .backDiv {
    margin-left: 10px;
  }

  .line {
    flex-direction: column;
    gap: 10px;
  }

  .line,
  .line-1-inner {
    margin-left: 0;
    margin-right: 0;
  }
}

@media only screen and (min-width: 401px) and (max-width: 767px) {
  .main {
    flex-direction: column;
    padding-left: 10px;
  }

  .section-1,
  .section-2 {
    width: 100%;
  }

  .backDiv {
    margin-left: 10px;
  }

  .line {
    flex-direction: column;
    gap: 10px;
  }

  .line,
  .line-1-inner {
    margin-left: 0;
    margin-right: 0;
  }
}

@media only screen and (min-width: 768px) and (max-width: 991px) {
  .main {
    padding-left: 15px;
  }

  .section-1 {
    width: 60%;
    padding-left: 20px;
  }

  .section-2 {
    width: 35%;
  }

  .backDiv {
    margin-left: 15px;
  }

  .line {
    flex-direction: column;
    gap: 10px;
  }

  .line,
  .line-1-inner {
    margin-left: 0;
    margin-right: 0;
  }

  .img-div,
  .img-div-1,
  .img-div-down {
    flex-direction: column;
    gap: 10px;
  }

  .input-box {
    width: 100%;
  }

  .btn {
    padding: 10px 20px;
  }
}

@media only screen and (min-width: 992px) and (max-width: 1099px){
  .main {
    padding-left: 20px;
  }

  .input-box {
    width: 250px;
  }
  
  .section-1 {
    width: 100%;
    padding-left: 30px;
  }

  .section-2 {
    width: 35%;
  }

  .backDiv {
    margin-left: 30px;
  }

  .line {
    flex-direction: row;
  }

  .line,
  .line-1-inner {
    margin-left: 0;
    margin-right: 0;
  }

  .img-div,
  .img-div-1,
  .img-div-down {
    flex-direction: row;
    gap: 15px;
  }

  .btn {
    padding: 10px 100px;
  }
}

@media only screen and (min-width: 1100px) {
  .main {
    padding-left: 20px;
  }

  .input-box {
    width: 300px;
  }
  
  .section-1 {
    width: 65%;
    padding-left: 30px;
  }

  .section-2 {
    width: 35%;
  }

  .backDiv {
    margin-left: 30px;
  }

  .line {
    flex-direction: row;
  }

  .line,
  .line-1-inner {
    margin-left: 0;
    margin-right: 0;
  }

  .img-div,
  .img-div-1,
  .img-div-down {
    flex-direction: row;
    gap: 15px;
  }

  .btn {
    padding: 10px 100px;
  }
  

/* Small devices (portrait tablets and large phones, 600px and up) */
@media only screen and (min-width: 600px) and (max-width: 767px) {...}
/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {...}
/* Large devices (laptops/desktops, 992px and up) */
@media only screen and (min-width: 992px) {...}
/* Extra large devices (large laptops and desktops, 1200px and up) */
@media only screen and (min-width: 1200px) {...}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>cards_theme</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>cards theme</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	// getting userID and user_name
	data.user = gs.getUserID();
	data.userName = gs.getUserName();

	// getting image from db_image table
	var Iname = "futureinsurance.png";
	var gr = new GlideRecord("db_image");
	gr.get(Iname);
	data.productImg = gr.getDisplayValue("image");

	// getting loged in user's data to prefill the form if exist
	var grUser = new GlideRecord("sys_user");
	if (grUser.get(data.user)) {
		data.name = grUser.getValue("name");
		data.gender = grUser.getValue("gender");
		data.email = grUser.getValue("email");
		data.phone = grUser.getValue("mobile_phone");
	} else {
		gs.addErrorMessage("User record not found");
		return;
	}

	data.records=[];
	var prods=new GlideRecord('x_rptp_insureme_insurance_products');
	prods.query();
	while(prods.next()){
		var prodName =prods.getValue('prod_name');
		var benefit= getBenefits(prods.getValue('prod_code'));
		var label = findTag(prods.getValue('prod_code'));
		
		if(benefit.length >2){
			
			data.records.push({
				prodName : prodName,
				benefits : benefit,
				sumAssured : prods.getValue('sum'),
				labels: label,
				prodCode : prods.getValue('prod_code'),
				insurer: prods.getValue('insurer'),
 			})
		}
	}


	
	function getBenefits(prodCode){
		var prodBenefit=new GlideRecord('x_rptp_insureme_insurance_products_benefits');
		prodBenefit.addQuery('product_code',prodCode);
		prodBenefit.addEncodedQuery('value!=Not Applicable^value!=null');
		prodBenefit.setLimit(3);
		prodBenefit.query();
		var benefits=[]
	//	var count=0;
		while(prodBenefit.next()){
			benefits.push({
				name: prodBenefit.getValue('name'),
				value: prodBenefit.getValue('value'),
			currency: prodBenefit.getValue('currency')
			})

		}
		
		return benefits;
	}
	
	
		function findTag(prodCode) {
    var tagObj = {};

    var rTable = new GlideRecord('x_rptp_insureme_recommendation');
    rTable.addQuery('product_code.prod_code', prodCode);
    rTable.query();

    if (rTable.next()) {
        tagObj.label = rTable.getValue('label');
        tagObj.type = rTable.getValue('type');
        //tagObj.orderby = rTable.getValue('orderby');
    } else {
        // Handle case where no record is found, maybe set default values or log a message
    }

    return tagObj; // Return the tagObj
}


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>sachin_hm</sys_created_by>
        <sys_created_on>2024-03-01 06:18:31</sys_created_on>
        <sys_id>e692b1a347a48ad055784a02516d433a</sys_id>
        <sys_mod_count>287</sys_mod_count>
        <sys_name>cards theme</sys_name>
        <sys_package display_value="SmartAssurance old" source="x_rptp_insureme">87b3cc0b4775711055784a02516d4350</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartAssurance old">87b3cc0b4775711055784a02516d4350</sys_scope>
        <sys_update_name>sp_widget_e692b1a347a48ad055784a02516d433a</sys_update_name>
        <sys_updated_by>harshitha</sys_updated_by>
        <sys_updated_on>2024-03-06 07:34:27</sys_updated_on>
        <template><![CDATA[
<div class="main">


  <div class="grid-card">
    <div class="card-container" ng-repeat="(index,product) in records">
      <div class="recommandation" ng-if="product.labels.label">

        <div ng-if="product.labels.type=='people'" id='people'>
          {{product.labels.label}}
        </div>
        <div ng-if="product.labels.type=='star'" id='star'>
          {{product.labels.label}}
        </div>
      </div>
      <div class="cardd">
        <div class="line1">
          <div class="line1a">
            <img src="https://ven06798.service-now.com/futureinsurance.png" alt="home">
            <h6>
              {{product.prodName}}
            </h6>
          </div>
          <div class="line1b">
            <input type="checkbox" 
                   class="checkbox1"
                   id="preference1"
                   name="preference1"
                   ng-model="checked"
                   ng-change="checkboxChanged(product.prodCode,product.sumAssured,product.prodName,index)">
            <label for="preference" class="compare">Compare</label>
          </div>
        </div>
        <div class="line2">
          <div class="line-item" ng-repeat="benefit in product.benefits">
            <div class="benefit-item">
              <p>
                <span class="small">{{benefit.name}}</span><br>
                <span class="small">{{benefit.currency}}{{benefit.value}}</span><br>

              </p>
            </div>
          </div>
        </div>


        <div class="line3">
          <h6><a href='/vfsp?id=plan_details' class="small">Plan Details</a></h6>
          <button type="button" class="btn-primary" data-toggle="modal" data-target="#exampleModal">
            ₹{{product.sumAssured}}
          </button>
        </div>
      </div>

      
      <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <form class="section-1" name="myForm">
      <h3 class="pMar">Personal Details</h3>
      <p>
        Please fill all the mandatory(<span class="required">*</span>) fields
      </p>
      <div
           class="mainBoxDiv"
           ng-repeat="user in users track by $index"
           ng-show="$index < numberOfPersons"
           >
        <div class="boxDiv">
          <div class="person-section">
            <h4 class="mar userNameInputBox" ng-click="togglePerson($index)">
              {{user.name ? user.name : 'Traveller ' + ($index + 1)}}
              {{user.age ? "(" + user.age + " yrs)" : ""}}
            </h4>
            <div class="iFrameDiv">
              <i
                 class="fa fa-angle-down"
                 ng-show="!isPersonHidden[$index]"
                 ng-click="togglePerson($index)"
                 ></i>
              <i class="fa fa-angle-up" ng-show="isPersonHidden[$index]" ng-click="togglePerson($index)"></i>
            </div>
          </div>
          <div ng-show="isPersonHidden[$index]">
            <div class="line mar">
              <!-- name and checkboxfor name -->
              <div>
                <div class="input-container">
                  <input
                         type="text"
                         class="input-box userNameInputBox"
                         id="username"
                         placeholder=""
                         ng-model="user.name"
                         ng-class="{ 'blue-border': user.name, 'red-border': !user.name }"
                         ng-required="true"
                         minlength="3"
                         />
                  <label for="username" class="input-label"
                         >Enter full name <span class="required">*</span></label
                    >
                </div>
              </div>

              <div class="input-container">
                <select
                        class="input-box"
                        required
                        ng-model="user.gender"
                        ng-class="{ 'blue-border': user.gender, 'red-border': !user.gender }"
                        >
                  <option value="">Please choose your gender</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                  <option value="other">Other</option>
                </select>
                <label class="input-label"
                       >Gender<span class="required">*</span></label
                  >
              </div>
            </div>
            <div class="line">
              <div class="input-container">
                <input
                       type="text"
                       class="input-box"
                       placeholder=""
                       ng-model="user.email"
                       ng-required="true"
                       ng-class="{ 'blue-border': user.email, 'red-border': !user.email }"
                       />
                <label for="username" class="input-label"
                       >Enter your email <span class="required">*</span></label
                  >
              </div>
              <div class="input-container">
                <input
                       type="tel"
                       class="input-box"
                       ng-class="{ 'blue-border': user.phone, 'red-border': !user.phone }"
                       placeholder=""
                       ng-model="user.phone"
                       ng-required="true"
                       maxlength="10"
                       pattern="[0-9]{10}"
                       />
                <label for="username" class="input-label"
                       >Enter your 10 digit mobile number
                  <span class="required">*</span></label
                  >
              </div>
            </div>
            <!-- line 2 -->
            <div class="line">
              <div class="input-container">
                <input
                       type="date"
                       class="input-box"
                       ng-class="{ 'blue-border': user.dob, 'red-border': !user.dob }"
                       id="dob"
                       placeholder=""
                       ng-model="user.dob"
                       ng-change="calculateAge()"
                       ng-required="true"
                       />
                <label for="username" class="input-label"
                       >Enter date of birth<span class="required">*</span></label
                  >
              </div>

              <div class="input-container">
                <input
                       type="text"
                       class="input-box"
                       id="username"
                       value="Indian"
                       disabled
                       />
                <label for="username" class="input-label">Nationality</label>
              </div>
            </div>
            <!-- line3 -->
            <div class="line">
              <div>
                <div class="input-container">
                  <input
                         type="text"
                         class="input-box"
                         id="username"
                         placeholder=""
                         ng-class="{ 'blue-border': user.passport, 'red-border': !user.passport }"
                         ng-model="user.passport"
                         maxlength="8"
                         ng-change="validatePassport()"
                         ng-required="true"
                         />
                  <label for="username" class="input-label"
                         >Enter passport number(A1234567)<span class="required"
                                                               >*</span
                    ></label
                    >
                </div>

              </div>
              <div>
                <div class="input-container">
                  <input
                         type="text"
                         class="input-box"
                         id="panInput"
                         placeholder=""
                         ng-model="user.panNumber"
                         ng-change="formatPan()"
                         maxlength="10"
                         ng-disabled="isPanDisabled"
                         />
                  <label for="panInput" class="input-label"
                         >Enter pan number(ABCDE1234F)</label
                    >
                </div>

                <div class="line-1-inner">
                  <input
                         type="checkbox"
                         ng-model="isPanDisabled"
                         ng-init="isPanDisabled=false"
                         class="panCheckBox"
                         />
                  <p>I don't have a pancard</p>
                </div>
              </div>
            </div>
            <h4>Nominee Details</h4>
            <div class="line">
              <div class="input-container">
                <input
                       type="text"
                       class="input-box userNameInputBox"
                       id="username"
                       placeholder=""
                       ng-model="user.nominee"
                       ng-class="{ 'blue-border': user.nominee, 'red-border': !user.nominee }"
                       ng-required="true"
                       minlength="3"
                       />
                <label for="username" class="input-label"
                       >Enter nominee full name<span class="required"
                                                     >*</span
                  ></label
                  >
              </div>
              <div class="input-container">
                <select
                        class="input-box"
                        required
                        ng-model="user.relationship"
                        ng-class="{ 'blue-border': user.relationship, 'red-border': !user.relationship }"
                        ng-init="user.relationship=''"
                        >
                  <option value="">Please choose an option</option>
                  <option value="wife">Wife</option>
                  <option value="father">Father</option>
                  <option value="mother">Mother</option>
                  <option value="brother">Brother</option>
                  <option value="sister">Sister</option>
                </select>
                <label for="username" class="input-label"
                       >Select nominee relation<span class="required"
                                                     >*</span
                  ></label
                  >
              </div>
            </div>
          </div>
        </div>
      </div>

      <button class="btn btn-primary" ng-click="rediectToPayment(index)">
        Continue
      </button>


    </form>



  </div>

      
      
    </div>
  </div>
  <div ng-if="compareArray.length>1" class='compareTile'>
    <div class='compareBlock' ng-repeat='product in compareArray' >
      <img src="https://ven06798.service-now.com/futureinsurance.png" alt="home">
      <div>
        {{product.productName}}
      </div>
    </div>
    <div>
      <button ng-click=compareProducts(compareArray)>
        Compare
      </button>
    </div>
  </div>

  
  
</div>


]]></template>
    </sp_widget>
</record_update>
