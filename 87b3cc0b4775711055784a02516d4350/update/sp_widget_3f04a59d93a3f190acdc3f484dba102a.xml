<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($scope) {
    var c = this;
   c.data.userInput = {};
	
  /* $scope.initializeForm = function(){
		 //alert('haii');
		  // console.log('c:', c);
        //c.data.arr_fields = []; // Reset arr_fields before populating

     if (c.options.table_name ) {
					c.data.formGenerated = true; 
					c.data.initializeForm=true;
            c.server.update({ tableName: c.options.table_name, initializeForm: true }).then(function (response) {
                // Assuming the server returns arr_fields in response
              //alert(JSON.stringify(response.data));  
							c.data.arr_fields = response.data.arr_fields || [];
							  //alert(c.data.arr_fields);				 

                console.log('Initialized form fields:', c.data.arr_fields);
            }).catch(function (error) {
               console.log('Error initializing form:', error);
            });
        } else {
           console.log('No valid table name entered. Skipping form initialization.');
        }
    
		
		 }();
		 */

    $scope.submitForm = function () {
        // Declare c.data.userInput object
        c.data.userInput = {};
     
        // Proceed with form submission logic
        for (var j = 0; j < c.data.fields_arr.length; j++) {
            var currentFieldSubmission = c.data.arr_fields[j];
					
       
            // Check if the field is mandatory and empty
        /*    if (currentFieldSubmission.Mandatory === 'false' && (currentFieldSubmission.value === '' || currentFieldSubmission.value === undefined)) {
               // alert('Mandatory field ' + currentFieldSubmission.column_label + ' is empty. Please fill it.');
                return;  // Prevent form submission if a mandatory field is empty
            }*/
					

            // Proceed to include the field in form submission
            if (currentFieldSubmission.data_type !== ' ' && currentFieldSubmission.column_label !== ' ' && currentFieldSubmission.value !== '') {
                c.data.userInput[currentFieldSubmission.column_label] = currentFieldSubmission.value;
             
						}
        }
			c.submit = true;
        // Pass selectedFields to the server-side for processing
        c.server.get({ submit: true, userInput: c.data.userInput, selectedFields: $scope.selectedFields }).then(function (response) {
            c.data.arr_fields.forEach(function (field) {
                field.value = ''; // Reset each field's value
            });
            alert('Form Submitted');
        }).catch(function (error) {
           console.log('Error submitting form data:', error);
        });
    };
	c.data.formGenerated = false;

}
]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,field_list</field_list>
        <has_preview>false</has_preview>
        <id>dynamic_insu_form</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Dynamic_insu_form</name>
        <option_schema>[{"hint":"Enter Table name","name":"table_name","section":"other","default_value":"","label":"Table Name","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
	data.table=$sp.getValue('table');
	data.fields=$sp.getValue('field_list');
	data.fields_arr=data.fields.split(',');
	data.arr_fields=[];
	//gs.addInfoMessage(data.arr_fields);
	//gs.addErrorMessage(data.arr_fields);
	
	var rec=new GlideRecord('sys_dictionary');
	rec.addQuery('name',data.table);
	rec.query();
	
	while(rec.next()){
		if(data.fields_arr.indexOf(rec.element.toString())!=-1){
			 data.arr_fields.push({
                    column_label: rec.element.toString(),
                    data_type: rec.internal_type.toString(),
                    Mandatory: rec.mandatory.toString(),
                    value: '' 
                });
			 }
	}
 if (input && input.submit) {
        //submitFormToTable(data.table);
			 submitFormToTable(input.userInput);
	 			
    }

    // Function to submit form data to the specified table
    function submitFormToTable(formData) {
        try {
            // Initialize GlideRecord for the specified table
            var targetTable = new GlideRecord(data.table);
            targetTable.initialize();

            // Iterate over formData and set values if the field exists in the GlideRecord
            for (var field in formData) {
                if (targetTable.isValidField(field)) {
                    targetTable.setValue(field, formData[field]);
                }
            }

            // Insert the record
            var newRecordSysId = targetTable.insert();

            if (newRecordSysId) {
                gs.info('Record inserted with Sys ID: ' + newRecordSysId);
                return 'Form submitted successfully!';
            } else {
                gs.error('Failed to insert the record.');
                return 'Failed to submit the form. Please try again.';
            }
        } catch (e) {
            gs.error('Error submitting form data:', e);
        }
    }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-01-04 12:25:52</sys_created_on>
        <sys_id>3f04a59d93a3f190acdc3f484dba102a</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>Dynamic_insu_form</sys_name>
        <sys_package display_value="SmartAssurance old" source="x_rptp_insureme">87b3cc0b4775711055784a02516d4350</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartAssurance old">87b3cc0b4775711055784a02516d4350</sys_scope>
        <sys_update_name>sp_widget_3f04a59d93a3f190acdc3f484dba102a</sys_update_name>
        <sys_updated_by>chandan.parmar</sys_updated_by>
        <sys_updated_on>2024-02-02 11:48:17</sys_updated_on>
        <template><![CDATA[<div>
   
    <h1><center>FORM</center></h1>
    <!-- New <div> for input fields with black thick border -->
    <hr style="border-color: grey; border-width: 3px;">
        <div ng-repeat="field in data.arr_fields">
            <div class="form-group">
                <label class="form-label">
                  <span ng-if="field.Mandatory === 'true' && field.column_label !== ' '" class="mandatory-label" style="color: red;">*</span>

                    {{field.column_label}}:
                </label>

                <!-- Field Input Types based on data_type -->
                <select ng-if="field.data_type === 'choice'" ng-model="field.value" id="{{field.column_label}}">
                    <!-- Options for 'choice' data type -->
                    <option id="M" value="male">Male</option>
                    <option id="F" value="female">Female</option>
                    <option id="Others" value="other">Other</option>
                </select>
               <select ng-if="field.data_type === 'boolean'" ng-model="field.value" id="{{field.column_label}}">
                    <!-- Options for 'choice' data type -->
                    <option value="True">True</option>
                    <option value="False">False</option>
                   
                </select>

                <input ng-if="field.data_type === 'reference'" type="text" ng-model="field.value" id="{{field.column_label}}" />
                <input ng-if="field.data_type === 'string'" type="text" ng-model="field.value" id="{{field.column_label}}" pattern="[^0-9]*" />
                <input ng-if="field.data_type === 'glide_date_time'" type="date" ng-model="field.value" id="{{field.column_label}}" />
                <input ng-if="field.data_type === 'integer'" type="text" ng-model="field.value" id="{{field.column_label}}" pattern="[0-9]*" />
                <input ng-if="field.data_type === 'glide_date'" type="date" ng-model="field.value" id="{{field.column_label}}" />
                 <input ng-if="field.data_type === 'user_image'" type="file" ng-model="field.value" id="{{field.column_label}}" accept="image/*" />
                  <input ng-if="field.data_type === 'file_attachment'" type="file" ng-model="field.value" id="{{field.column_label}}" />
            </div>
        </div>
  
    <br>
    <button id="submit!" type="submit" class="btn-primary" ng-click="submitForm()" value="Proceed">Submit</button>

    
]]></template>
    </sp_widget>
</record_update>
