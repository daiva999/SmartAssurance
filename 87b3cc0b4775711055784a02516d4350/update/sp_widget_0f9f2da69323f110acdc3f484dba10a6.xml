<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($scope) {
    var c = this;
   // alert(c.options.table_name);
    c.data = c.data || {};
    c.data.userInput = {};
	var arrFields;
	alert(c.data.arr_fields);

	c.data.formGenerated = false;
	var obj={
		"sent":true,
	}

	}
  /* $scope.initializeForm = function(){
		 //alert('haii');
		  // console.log('c:', c);
        //c.data.arr_fields = []; // Reset arr_fields before populating

     if (c.options.table_name ) {
					c.data.formGenerated = true; 
					c.data.initializeForm=true;
            c.server.update({ tableName: c.options.table_name, initializeForm: true }).then(function (response) {
                // Assuming the server returns arr_fields in response
              //alert(JSON.stringify(response.data));  
							c.data.arr_fields = response.data.arr_fields || [];
							  //alert(c.data.arr_fields);				 

                console.log('Initialized form fields:', c.data.arr_fields);
            }).catch(function (error) {
               console.log('Error initializing form:', error);
            });
        } else {
           console.log('No valid table name entered. Skipping form initialization.');
        }
    
		
		 }();
		 */
console.log(c.data.arr_fields);
    $scope.submitForm = function () {
        // Declare c.data.userInput object
        c.data.userInput = {};

        // Proceed with form submission logic
        for (var j = 0; j < c.data.fields.length; j++) {
            var currentFieldSubmission = c.data.arr_fields[j];

            // Check if the field is mandatory and empty
            if (currentFieldSubmission.Mandatory === 'false' && (currentFieldSubmission.value === '' || currentFieldSubmission.value === undefined)) {
               // alert('Mandatory field ' + currentFieldSubmission.column_label + ' is empty. Please fill it.');
                return;  // Prevent form submission if a mandatory field is empty
            }

            // Proceed to include the field in form submission
            if (currentFieldSubmission.data_type !== ' ' && currentFieldSubmission.column_label !== ' ' && currentFieldSubmission.value !== '') {
                c.data.userInput[currentFieldSubmission.column_label] = currentFieldSubmission.value;
            }
        }

 
        // Pass selectedFields to the server-side for processing
        c.server.update({ submit: true, userInput: c.data.userInput, selectedFields: $scope.selectedFields }).then(function (response) {
            c.data.arr_fields.forEach(function (field) {
                field.value = ''; // Reset each field's value
            });
            alert('Form Submitted');
        }).catch(function (error) {
           console.log('Error submitting form data:', error);
        });
    };
	//c.data.formGenerated = false;


]]></client_script>
        <controller_as>c</controller_as>
        <css>.mandatory-label {
        color: red;
        font-size: 30px;
   vertical-align: middle;
    }

</css>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,field_list</field_list>
        <has_preview>true</has_preview>
        <id>dynamic_form_generator</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Dynamic_form_generator</name>
        <option_schema>[{"hint":"Enter Table name","name":"table_name","section":"Presentation","default_value":"","label":"Table Name","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
	data.table=$sp.getValue('table');
	data.fields=$sp.getValue('field_list');
	data.arr_fields=[];
	gs.addErrorMessage(data.fields);
	/*data.fieldNames =data.fields.split(',').map(function(item) {
    return item.trim();
});
*/
	
	for(var i in data.fields){
		gs.addErrorMessage("hello");
	}
	
	
	/*for (var i = 0; i < fieldNames.length; i++) {
		gs.log('haii');
    var fieldName = fieldNames[i].trim();
    // Get the GlideElement for the field
    var glideRecord = new GlideRecord(data.table);
    glideRecord.initialize();
    if (glideRecord.isValidField(fieldName)) {
        var glideElement = glideRecord.getElement(fieldName);
        // Get data type
        var dataType = glideElement.getED().getInternalType();
        // Check if the field is mandatory
        var isMandatory = glideElement.getED().mandatory();
        // Add field information to the array
        data.arr_fields.push({
            name: fieldName,
            dataType: dataType,
            isMandatory: isMandatory
        });
    } else {
        gs.warn('Invalid field name: ' + fieldName);
    }
}
	console.log(data.arr_fields);
	*/
	 gs.addInfoMessage(data.arr_fields);
if (input && input.sent) {
console.log('initializeForm block triggered');
	
   // data.arr_fields = [];

        /*try {
            var gr = new GlideRecord('sys_dictionary');
					  //gs.addErrorMessage(input.tableName);
            gr.addQuery('name', data.table);
            gr.query();
					  //gs.addInfoMessage(gr.getRowCount());

            while (gr.next()) {
                data.arr_fields.push({
                    column_label: gr.element.toString(),
                    data_type: gr.internal_type.toString(),
                    Mandatory: gr.mandatory.toString(),
                    value: '' // Initialize value for each field
                });
            }
						
					
					
    var excludedColumns = [
        { column_label: 'sys_id', data_type: 'GUID' },
        { column_label: 'sys_created_by', data_type: 'string' },
        { column_label: 'sys_updated_on', data_type: 'glide_date_time' },
        { column_label: 'sys_mod_count', data_type: 'integer' },
        { column_label: 'sys_updated_by', data_type: 'string' },
        { column_label: 'sys_created_on', data_type: 'glide_date_time' },
        { column_label: ' ' },
        { data_type: ' ' },
				{ column_label: undefined },
				{ data_type: undefined },
        { column_label: '', data_type: 'collection' },
    ];

    data.arr_fields = data.arr_fields.filter(function (obj) {
        return !excludedColumns.some(function (excludedObj) {
            return (
                obj.column_label === excludedObj.column_label &&
                obj.data_type === excludedObj.data_type
            );
        });
    });
		
				//	gs.addInfoMessage(JSON.stringify(data.arr_fields));

            // Log the fetched fields to the console
        //    gs.info('Initialized form fields:', data.arr_fields);

            // Send arr_fields back to the client
            action.setRedirectURL(data);
        } catch (e) {
            gs.error('Error initializing form:', e);
        }
   
}
*/
}
    // Check if the submit flag is set
    if (input || input.submit) {
       
    }

    // Function to submit form data to the specified table
    function submitFormToTable(formData) {
        try {
            // Initialize GlideRecord for the specified table
            var targetTable = new GlideRecord(input.tableName);
            targetTable.initialize();

            // Iterate over formData and set values if the field exists in the GlideRecord
            for (var field in formData) {
                if (targetTable.isValidField(field)) {
                    targetTable.setValue(field, formData[field]);
                }
            }

            // Insert the record
            var newRecordSysId = targetTable.insert();

            if (newRecordSysId) {
                gs.info('Record inserted with Sys ID: ' + newRecordSysId);
                return 'Form submitted successfully!';
            } else {
                gs.error('Failed to insert the record.');
                return 'Failed to submit the form. Please try again.';
            }
        } catch (e) {
            gs.error('Error submitting form data:', e);
        }
    }
}
)();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-01-08 10:28:44</sys_created_on>
        <sys_id>0f9f2da69323f110acdc3f484dba10a6</sys_id>
        <sys_mod_count>154</sys_mod_count>
        <sys_name>Dynamic_form_generator</sys_name>
        <sys_package display_value="SmartAssurance" source="x_rptp_insureme">87b3cc0b4775711055784a02516d4350</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartAssurance">87b3cc0b4775711055784a02516d4350</sys_scope>
        <sys_update_name>sp_widget_0f9f2da69323f110acdc3f484dba10a6</sys_update_name>
        <sys_updated_by>sachin_hm</sys_updated_by>
        <sys_updated_on>2024-01-11 09:02:44</sys_updated_on>
        <template><![CDATA[<div>
    <!-- Add input field for table name -->
    <!--<div style="margin-bottom: 10px;">
        <label for="tableNameInput">Enter Table Name:</label>
        <input type="text" id="tableNameInput" ng-model="data.tableName" placeholder="Table Name" />
        <button type="button" ng-click="initializeForm()">Generate Form</button>
    </div>
-->

    <!-- your widget template -->
 <h1>
   {{data.fields}}
  </h1>
    <h1><center>FORM</center></h1>
    <!-- New <div> for input fields with black thick border -->
    <hr style="border-color: grey; border-width: 3px;">
        <div ng-repeat="field in data.arr_fields">
            <div class="form-group">
                <label class="form-label">
                    <!--<span ng-if="field.Mandatory === 'true' && field.column_label !== ' '" class="mandatory-label">*</span>-->
                    {{field}}:
                </label>

                <!-- Field Input Types based on data_type -->
                <select ng-if="field.data_type === 'choice'" ng-model="field.value" id="{{field.column_label}}">
                    <!-- Options for 'choice' data type -->
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="other">Other</option>
                </select>
               <select ng-if="field.data_type === 'boolean'" ng-model="field.value" id="{{field.column_label}}">
                    <!-- Options for 'choice' data type -->
                    <option value="True">True</option>
                    <option value="False">False</option>
                   
                </select>

                <input ng-if="field.data_type === 'reference'" type="text" ng-model="field.value" id="{{field.column_label}}" />
                <input ng-if="field.data_type === 'string'" type="text" ng-model="field.value" id="{{field.column_label}}" pattern="[^0-9]*" />
                <input ng-if="field.data_type === 'glide_date_time'" type="date" ng-model="field.value" id="{{field.column_label}}" />
                <input ng-if="field.data_type === 'integer'" type="text" ng-model="field.value" id="{{field.column_label}}" pattern="[0-9]*" />
                <input ng-if="field.data_type === 'glide_date'" type="date" ng-model="field.value" id="{{field.column_label}}" />
                 <input ng-if="field.data_type === 'user_image'" type="file" ng-model="field.value" id="{{field.column_label}}" accept="image/*" />
                  <input ng-if="field.data_type === 'file_attachment'" type="file" ng-model="field.value" id="{{field.column_label}}" />
            </div>
        </div>
  
    <br>
    <button type="submit" class="btn-primary" ng-click="submitForm()" value="Proceed">Submit</button>

    
]]></template>
    </sp_widget>
</record_update>
