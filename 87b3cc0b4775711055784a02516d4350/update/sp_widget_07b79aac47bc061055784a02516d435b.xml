<?xml version="1.0" encoding="UTF-8"?><record_update>
    <sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script><![CDATA[api.controller = function ($scope, $rootScope, spUtil) {
	var c = this;


	var schengen=JSON.parse(sessionStorage.getItem('schengen'));
	//alert(JSON.stringify(schengen))
	if(schengen && schengen.tourtype && schengen.place){
		$scope.selectedRegion=schengen.place;
		sessionStorage.removeItem('schengen');
	}

	$scope.travellers = [];

	var dateFill= JSON.parse(sessionStorage.getItem(c.data.username));
	$scope.daysDifference = 0;

	// Calculate today's date to set as min date for start date
	var today = new Date();
	$scope.minStartDate = today.toISOString().split('T')[0];

	// Create a new Date object based on minStartDate and add one day to it
	var minStartDateObj = new Date($scope.minStartDate);
	minStartDateObj.setDate(minStartDateObj.getDate() + 1);

	// Set minStartofEndDate to the updated date
	$scope.minStartofEndDate = minStartDateObj.toISOString().split('T')[0];

	$scope.maxEndDate = ''; // By default, no maximum end date

	$scope.calculateDuration = function() {
		if ($scope.start && $scope.end) {
			var startDate = new Date($scope.start);
			var endDate = new Date($scope.end);

			if (endDate < startDate) {
				// If end date is before start date, set max end date to start date
				$scope.maxEndDate = $scope.start;
			} else {
				// If end date is valid, reset max end date
				$scope.maxEndDate = '';
			}

			var differenceInTime = endDate.getTime() - startDate.getTime();
			var dayDiff = Math.round(differenceInTime / (1000 * 3600 * 24));
			if(dayDiff>0){
				$scope.daysDifference=dayDiff;
			}
		}
	};
	$scope.$watch('start', function(newDate, oldDate) {
		if (newDate) {
			var selectedDate = new Date(newDate);
			selectedDate.setDate(selectedDate.getDate() + 1);
			$scope.minStartofEndDate = selectedDate.toISOString().split('T')[0];
		}
	});


	$scope.options = [
		{ label: 'Single Trip', value: 'single' },
		{ label: 'Multi Trip', value: 'multi' },
		{ label: 'Annual Trip', value: 'annual' },
		{ label: 'Student Trip', value: 'student' }
	];

	$scope.updateDropdownOptions = function () {
		$scope.regions = [];
		switch ($scope.selectedOption) {
			case 'single':
				$scope.regions = [
					{ label: 'Asia', value: 'asia' },
					{ label: 'Schengen', value: 'schengen' },
					{ label: 'America', value: 'america' },
					{ label: 'Others', value: 'others' }
				];
				break;
			case 'multi':
				$scope.regions = [
					{ label: 'Worldwide', value: 'worldwide' }
				];
				break;
			case 'annual':
			case 'student':
				$scope.regions = [
					{ label: 'Excluding USA & Canada', value: 'excluding_usa_&_canada' },
					{ label: 'Including USA & Canada', value: 'including_usa_&_canada' }
				];
				break;
			default:
				break;
		}
	};

	$scope.selectedOption = 'single';
	$scope.updateDropdownOptions();
	$scope.selectedRegion = 'schengen';
	$scope.isIndianPassportHolder='yes'
	$scope.generateFields = function () {
		var size=$scope.travellers.length;
		var newSelectedValue=$scope.numberOfTravellers;
		if(newSelectedValue>=size){
			var diff=newSelectedValue-size;
			for (var i = 0; i < diff; i++) {
				$scope.travellers.push({
					age: ''
				});
			}
		}
		else{
			var diff=size-newSelectedValue;
			for(i=0;i<diff;i++){
				$scope.travellers.pop();
			}
		}

		/*
		$scope.travellers.forEach(function(traveller, index) {
			for(var key in traveller) {
				if(traveller.hasOwnProperty(key)) {
					var scopeKey = "travellers[" + index + "]." + key;
					$scope.$watch(scopeKey, function(newValues, oldValues) {
						if (!angular.equals(newValues, oldValues)) {
							$scope.storeSessionDetails();
						}
					});
				}
			}
		});
		*/
	}

	$scope.ages = [];
	for (var i = 1; i <= 70; i++) {
		$scope.ages.push(i);
	}


	$scope.storeSessionDetails = function () {

		// Check if any required field is empty
		var fullData = {
			"tripType": $scope.selectedOption,
			"travelRegion": $scope.selectedRegion,
			"startDate": $scope.start,
			"endDate": $scope.end,
			"duration": $scope.daysDifference,
			"numberOfPersons": $scope.numberOfTravellers,
			"indianPassportHolder": $scope.isIndianPassportHolder,
			"travellerAges": $scope.travellers
		};

		sessionStorage.setItem("sessionDetails", JSON.stringify(fullData));
		$rootScope.$emit("details", fullData);
	}
	/*
	$scope.$watchGroup(['selectedOption',
											'selectedRegion',
											'start',
											'end',
											'daysDifference',
											'numberOfTravellers',
											'travellerAge',
											'traveller.age',
											'isIndianPassportHolder'
										 ], function (newValues, oldValues) {
		// Check if any of the watched values have changed
		if (!angular.equals(newValues, oldValues)) {
			$scope.storeSessionDetails();
		}
	});
	*/

	var sessionDetails=JSON.parse(sessionStorage.getItem('sessionDetails'));
	var details=sessionDetails;
	//update using sessionDetails	
	if (details != null) {
		$scope.selectedOption = details.tripType;
		$scope.updateDropdownOptions(details.tripType);
		$scope.selectedRegion = details.travelRegion;
		$scope.start = new Date(details.startDate);
		$scope.end = new Date(details.endDate);
		$scope.daysDifference=details.duration;
		$scope.numberOfTravellers = details.numberOfPersons;
		$scope.generateFields();
		$scope.isIndianPassportHolder = details.indianPassportHolder;

		if (details.travellerAges && details.travellerAges.length > 0) {
			if ($scope.numberOfTravellers == details.travellerAges.length) {
				for (i = 0; i < $scope.numberOfTravellers; i++) {
					if ($scope.ages.indexOf(details.travellerAges[i].age) !== -1) {
						$scope.travellers[i].age = details.travellerAges[i].age;
					} else {
						console.log("Age for traveller " + (i+1) + " is not within available options.");
					}
				}
			} else {
				console.log("Number of travellers doesn't match the stored data.");
			}
		}

		// Broadcast the details data using $rootScope.$emit()
		$rootScope.$emit("details", details);
		$scope.storeSessionDetails();

	}

	// Add a function to handle button click
	/*
    $scope.handleButtonClick = function () {
        $scope.storeSessionDetails();

			 //window.location.href = "your_destination_page_url_here";
    };
		*/

	$scope.handleButtonClick = function() {
		var isFilled = true;

		// Check if all fields are filled
		angular.forEach([$scope.selectedOption, $scope.selectedRegion, $scope.start, $scope.end, $scope.daysDifference, $scope.numberOfTravellers, $scope.isIndianPassportHolder], function(value) {
			if (!value) {
				isFilled = false;
			}
		});

		// Check if any traveller age is not filled
		angular.forEach($scope.travellers, function(traveller) {
			if (!traveller.age) {
				isFilled = false;
			}
		});

		// If all fields are filled, store session details and redirect
		if (isFilled) {
			$scope.storeSessionDetails();
			// Redirect to another page
			window.location.href = "https://ven06798.service-now.com/mesp?id=card_theme_page";
		} else {
			// Display alert if any field is empty
			alert("Please fill in all the fields.");
		}
	};



	if(dateFill && dateFill.dob && sessionDetails==null ){
		var dob = new Date(dateFill.dob);
		var currentDate = new Date();
		var timeDiff = currentDate.getTime() - dob.getTime();
		var ageInMilliseconds = new Date(timeDiff);
		var ageInYears = Math.abs(ageInMilliseconds.getUTCFullYear() - 1970);
		$scope.numberOfTravellers = "1";
		//alert($scope.numberOfTravellers);
		$scope.generateFields();
		$scope.travellers[0].age = ageInYears;

		//alert(JSON.stringify($scope.travellers));
	}




}

]]></client_script>
<controller_as>c</controller_as>
<css>* {
  font-family: 'Helvetica';
}

.tripForm {
  display: flex;
  justify-content: center;
  align-items: center;
}

input[type="date"],
select {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.invalid {
  display: none;
}

input[type="date"] {
  color: rgb(0, 0, 0);
}

input[type="date"]:visited {
  color: black;
}

.selectT {
  height: 40px;
}

.box {
  box-sizing: border-box;
  font-size: 16px;
  color: rgb(0, 0, 0);
  line-height: 19.2px;
  margin-bottom: 10px;
}

option {
  color: rgb(0, 0, 0);
}

.whole {
  box-sizing: border-box;
  padding: 35px 15px 0 15px;
  background-color: rgb(255, 255, 255);
  position: relative;
  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
  padding-left: 10px;
  border-radius: 5px;
  overflow: hidden;
  padding-bottom: 5px;
  background-repeat: no-repeat;
  background-size: 100%;
  background-position: 0 5%;
  margin-bottom: 40px;
  height: 75vh;
}

.iFrameDiv {
  display: none;
}

.iFrameDiv i {
  font-size: 18px;
}

.line {
  display: grid;
  gap:15px;
  grid-template-columns: repeat(2, 1fr);
  
  //display:flex;
  //gap:30px;
  
}

.topSection {
  display: flex;
  justify-content: space-evenly;
}

.radioDiv {
  display: flex;
}

.radioDivInner {
  display: grid;
  grid-template-rows: 30px 30px;
  grid-template-columns: 130px 130px;
}

.wi-40 {
  width: 40%;
  margin-left: 10px;
}

.wi-60 {
  width: 50%;
}

.daysDifference {
  margin-bottom: 10px;
}

h4 {
  font-style: bold;
  color: rgb(0, 0, 0);
}

.head {
  box-sizing: border-box;
  font-size: 16px;
  color: rgb(102, 102, 102);
  margin-bottom: 17px;
  margin-top: 0px;
  font-weight: 600;
  text-align: center;
  font-style: bold;
  font-style: italic;
  color: rgb(0, 0, 0);
}

.tooltip {
  position: relative;
  display: inline-block;
  opacity: 1;
  font-size: 14px;
}

.tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: #555;
  color: #fff;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;
  position: absolute;
  z-index: 1;
  bottom: 125%;
  left: 80%;
  margin-left: -60px;
  opacity: 0;
  transition: opacity 0.3s;
}

.tooltip .tooltiptext::after {
  content: "";
  position: absolute;
  top: 100%;
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: #555 transparent transparent transparent;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
  opacity: 1;
}

.continue {
  display: flex;
  justify-content: center;
}

.invisible-scrollbar::-webkit-scrollbar {
  display: none;
}

.id {
  text-align: center;
}

.age-dropdown {
  height: 2.5em;
  overflow-y: auto;
  width: 47%;
}

.space {
  margin-bottom: 5px;
}

.ages{
  margin:1px;
}</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>vfs_pop_up_form</id>
<internal>false</internal>
<link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
<name>VFS Pop Up Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	data.userId = gs.getUserID();
	data.username=gs.getUserName();
	// gs.addInfoMessage(data.userId)
})();]]></script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>harshitha</sys_created_by>
<sys_created_on>2024-03-04 11:34:40</sys_created_on>
<sys_id>07b79aac47bc061055784a02516d435b</sys_id>
<sys_mod_count>62</sys_mod_count>
<sys_name>VFS Pop Up Form</sys_name>
<sys_package display_value="SmartAssurance" source="x_rptp_insureme">87b3cc0b4775711055784a02516d4350</sys_package>
<sys_policy/>
<sys_scope display_value="SmartAssurance">87b3cc0b4775711055784a02516d4350</sys_scope>
<sys_update_name>sp_widget_07b79aac47bc061055784a02516d435b</sys_update_name>
<sys_updated_by>harshitha</sys_updated_by>
<sys_updated_on>2024-03-06 06:37:19</sys_updated_on>
<template><![CDATA[<div>

  <!-- Button trigger modal -->
  <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalLong">
    Open
  </button>

  <!-- Modal -->
  <div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title" id="exampleModalLongTitle">Help us plan your trip, fill out these details!</h3>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="line">
            <div style="margin-bottom: 15px;">
              <label>Choose Trip: <span style="color: red">*</span></label>
              <select style="width: 100%;" id="option_0" ng-model="selectedOption" ng-change="updateDropdownOptions()" required>
                <option ng-repeat="option in options" id="choose_trip_{{$index}}" ng-value="option.value">{{ option.label }}</option>
              </select>
            </div>
            <div style="margin-bottom: 15px;">
              <label>Travel region: <span style="color: red">*</span></label>
              <select style="width: 100%;" id="travelregion" ng-model="selectedRegion" required>
                <option ng-repeat="region in regions" id="{{region.value}}_{{$index}}" ng-value="region.value">{{ region.label }}</option>
              </select>
            </div>
          </div>
          <div class="line">
            <div style="margin-bottom: 15px;">
              <label>Start Date: <span style="color: red">*</span></label>
              <input type="date" style="width: 100%;" id="startdatepicker" ng-model="start" min="{{minStartDate}}" max="{{maxEndDate}}" ng-change="calculateDuration()" required />
            </div>
            <div style="margin-bottom: 15px;">
              <label>End Date: <span style="color: red">*</span></label>
              <input type="date" style="width: 100%;" id="enddatepicker" ng-model="end" min="{{minStartofEndDate}}" max="{{maxEndDate}}" ng-change="calculateDuration()" required />
            </div>
          </div>
          <div class="radioDiv daysDifference" ng-if="daysDifference">
            <label for="startdatepicker" class="wi-60"></label>
            <p class="wi-40">Duration is {{ daysDifference }} Day(s)</p>
          </div>
          <div style="margin-bottom: 15px;">
            <label class="wi-40"><h5>Are you/these Indian passport holder(s)?</h5></label>
            <label>
              <input type="radio" name="yes" value="yes" ng-model="isIndianPassportHolder" checked />
              <span >Yes</span>
            </label>
            <label>
              <input type="radio" name="yes" ng-model="isIndianPassportHolder" value="no" />
              <span>No</span>
            </label>
          </div>
          <div class="line">
            <div>
              <label>No. of travellers (Up to 4): <span style="color: red">*</span></label>
              <select id="travelnumbers" style="width: 100%;" ng-change="generateFields()" ng-model="numberOfTravellers" required>
                <option value="1" id="option1">1</option>
                <option value="2" id="option2">2</option>
                <option value="3" id="option3">3</option>
                <option value="4" id="option4">4</option>
              </select>
            </div>
            <div ng-repeat="traveller in travellers track by $index">
              <label class="ages">Age of Person {{$index + 1}}: <span style="color: red">*</span></label>
              <select style="width: 100%;" id="selectAge{{$index}}" name="selectAge{{$index}}" ng-model="traveller.age" ng-options="age for age in ages" required></select>
            </div>
          </div>
        </div>
        <div class="modal-footer">

          <button ng-click="handleButtonClick()" type="button" class="btn btn-primary">Continue</button>
        </div>
      </div>
    </div>
  </div>

</div>


]]></template>
</sp_widget>
</record_update>
