<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function() {
  /* widget controller */
  var c = this;
	
	$scope.submitAnswers = function() {
    var userInput = {}; // Object to store user responses

    // Iterate through data.variables to collect user responses
    data.variables.forEach(function(variable) {
        // Check if variable has a valid question and answer
        if (variable.question && variable.answer !== undefined) {
            // Include the question and its answer in userInput object
            userInput[variable.question] = variable.answer;
        }
    });

    // Submit user responses to the server
    c.server.get({
        method: "submitAnswers",
        userInput: userInput
    }).then(function(response) {
        // Handle server response
        alert('Thank you for your submission.');
    }).catch(function(error) {
        console.error('Error submitting answers:', error);
    });
};

};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>demo_rp</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Demo RP</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	(function () {
    // Retrieve necessary data from the client-side
    var tableName ='x_rptp_insureme_insurance_questionnaire'; // Replace 'your_table_name' with the actual table name
    var recordProducerName = 'Insurance Product Questions'; // Replace 'Insurance Product Questions' with the actual record producer name

    // Function to retrieve record producer responses based on the name
    function getRecordProducerResponses(recordProducerName) {
        var responses = {}; // Initialize an empty object to store responses

        // Query the record producer responses based on the name
        var recordProducerGR = new GlideRecord('sys_record_producer');
        recordProducerGR.addQuery('name', recordProducerName);
        recordProducerGR.query();

        if (recordProducerGR.next()) {
            // Retrieve the record producer responses
            // Modify this part based on how the responses are stored in your system
            responses.answer1 = recordProducerGR.getValue('field1');
            responses.answer2 = recordProducerGR.getValue('field2');
            // Add more fields as needed
        }

        return responses;
    }

    // Function to submit record producer responses to the specified table
    function submitRecordProducerResponses(responses) {
        try {
            // Initialize GlideRecord for the specified table
            var targetTable = new GlideRecord(tableName);
            targetTable.initialize();

            // Map record producer responses to corresponding fields in the table
            // Modify this part based on the structure of your table and responses
            targetTable.answer1 = responses.answer1;
            targetTable.answer2 = responses.answer2;
            // Set other fields as needed

            // Insert the record
            var newRecordSysId = targetTable.insert();

            if (newRecordSysId) {
                gs.info('Record inserted with Sys ID: ' + newRecordSysId);
                return 'Record producer responses submitted successfully!';
            } else {
                gs.error('Failed to insert the record.');
                return 'Failed to submit record producer responses. Please try again.';
            }
        } catch (e) {
            gs.error('Error submitting record producer responses:', e);
        }
    }

    // Main function to handle form submission
    if (input && input.submit) {
        // Get record producer responses based on the name
        var responses = getRecordProducerResponses(recordProducerName);

        // Submit record producer responses to the table
        submitRecordProducerResponses(responses);
    }
})();


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harshitha</sys_created_by>
        <sys_created_on>2024-02-27 10:06:21</sys_created_on>
        <sys_id>aaf90baa472cc2d055784a02516d4356</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Demo RP</sys_name>
        <sys_package display_value="SmartAssurance old" source="x_rptp_insureme">87b3cc0b4775711055784a02516d4350</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartAssurance old">87b3cc0b4775711055784a02516d4350</sys_scope>
        <sys_update_name>sp_widget_aaf90baa472cc2d055784a02516d4356</sys_update_name>
        <sys_updated_by>harshitha</sys_updated_by>
        <sys_updated_on>2024-02-27 10:08:23</sys_updated_on>
        <template><![CDATA[<div>
<!-- your widget template -->
  
<div class="panel-body">
  <div class="form-group">
    <button class="btn btn-primary" ng-click="c.openModal()">
      Answer these questions
    </button>
  </div>
</div>


{{c.variables[0].answer}}
{{c.variables[1].answer}}
{{c.variables[2].answer}}

<!--<script type="text/ng-template" id="modalTemplate"> -->
<div>
  <form>
    <!-- your widget template -->
    <div ng-if="data.producerData">
      <h3>{{ data.producerData.name }}</h3>
      <!--    <p>{{ data.producerData.description }}</p> -->
    </div>

    <div ng-if="data.variables.length > 0">
      <!--<h4>Variables:</h4> -->
      <ul>
        <li ng-repeat="variable in data.variables">
          <strong>{{ variable.question }}</strong><br>
          <div ng-if="variable.type === '1'">
            <!-- Use a unique ng-model for each dropdown -->
            <select ng-model="variable.answer" >
              <option value="">Select an option</option>
              <option value="true">Yes</option>
              <option value="false">No</option>
            </select>
          </div>

          <br>
        </li>
      </ul>
      <button class="btn btn-primary" ng-click="submitAnswers()">Submit</button>
    </div>
  </form>
</div>

<!--</script>-->





</div>]]></template>
    </sp_widget>
</record_update>
